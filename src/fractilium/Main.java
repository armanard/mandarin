package fractilium;

import fractilium.gui.fsp.MandelbrotSettingsPanel;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;

/**
 *
 * @author Ari
 */
public class Main extends javax.swing.JFrame {

    private Point mouseInitPos, mouseFinPos;
    private Rectangle selRect;
    private double zoomFactor;

    /**
     * Creates new form Fractilium
     */
    public Main() {
        initComponents();
        selRect = new Rectangle();
        zoomFactor = 1.5;

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mouseSpeedButtonGroup = new javax.swing.ButtonGroup();
        fractalButtonGroup = new javax.swing.ButtonGroup();
        notificationAreaPanel = new javax.swing.JPanel();
        notificationAreaLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        jSplitPane1 = new javax.swing.JSplitPane();
        settingsPanel = new javax.swing.JPanel();
        imagePanel = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveBufferMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        rotateImageMenu = new javax.swing.JMenu();
        rotateClockwiseMenuItem = new javax.swing.JMenuItem();
        rotateAnticlockwiseMenuItem = new javax.swing.JMenuItem();
        fixScalingMenuItem = new javax.swing.JMenuItem();
        resetRenderingRegionMenuItem = new javax.swing.JMenuItem();
        redrawImageMenuItem = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        mouseZoomSpeedMenu = new javax.swing.JMenu();
        jRadioButtonMenuItem5 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem6 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem8 = new javax.swing.JRadioButtonMenuItem();
        fractalTypeMenu = new javax.swing.JMenu();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem2 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem3 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem4 = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fractilium");

        notificationAreaPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        notificationAreaPanel.setPreferredSize(new java.awt.Dimension(0, 28));

        notificationAreaLabel.setText("--------");

        progressBar.setPreferredSize(new java.awt.Dimension(150, 23));

        javax.swing.GroupLayout notificationAreaPanelLayout = new javax.swing.GroupLayout(notificationAreaPanel);
        notificationAreaPanel.setLayout(notificationAreaPanelLayout);
        notificationAreaPanelLayout.setHorizontalGroup(
            notificationAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(notificationAreaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(notificationAreaLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        notificationAreaPanelLayout.setVerticalGroup(
            notificationAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(notificationAreaPanelLayout.createSequentialGroup()
                .addGroup(notificationAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(notificationAreaLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setDividerLocation(640);
        jSplitPane1.setResizeWeight(1.0);
        jSplitPane1.setContinuousLayout(true);

        settingsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        settingsPanel.setLayout(new java.awt.CardLayout());

        settingsPanel.add(new fractilium.gui.fsp.MandelbrotSettingsPanel(this, imagePanel.getBounds()), "Mandelbrot");

        jSplitPane1.setRightComponent(settingsPanel);

        imagePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        imagePanel.setPreferredSize(new java.awt.Dimension(640, 640));
        imagePanel.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                imagePanelMouseWheelMoved(evt);
            }
        });
        imagePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                imagePanelMouseReleased(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                imagePanelMousePressed(evt);
            }
        });
        imagePanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                imagePanelComponentResized(evt);
            }
        });
        imagePanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                imagePanelMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 765, Short.MAX_VALUE)
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 429, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(imagePanel);

        fileMenu.setText("File");

        saveBufferMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveBufferMenuItem.setText("Save Image Buffer");
        saveBufferMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBufferMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveBufferMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        rotateImageMenu.setText("Rotate Image");

        rotateClockwiseMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        rotateClockwiseMenuItem.setText("Clockwise");
        rotateClockwiseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateClockwiseMenuItemActionPerformed(evt);
            }
        });
        rotateImageMenu.add(rotateClockwiseMenuItem);

        rotateAnticlockwiseMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_EQUALS, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        rotateAnticlockwiseMenuItem.setText("Anticlockwise");
        rotateAnticlockwiseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateAnticlockwiseMenuItemActionPerformed(evt);
            }
        });
        rotateImageMenu.add(rotateAnticlockwiseMenuItem);

        editMenu.add(rotateImageMenu);

        fixScalingMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        fixScalingMenuItem.setText("Fix Scaling");
        fixScalingMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fixScalingMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(fixScalingMenuItem);

        resetRenderingRegionMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        resetRenderingRegionMenuItem.setText("Reset Rendering Region");
        resetRenderingRegionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetRenderingRegionMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(resetRenderingRegionMenuItem);

        redrawImageMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        redrawImageMenuItem.setText("Redraw Image");
        redrawImageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redrawImageMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(redrawImageMenuItem);

        menuBar.add(editMenu);

        jMenu1.setText("Settings");

        mouseZoomSpeedMenu.setText("Mouse Zoom Speed");

        mouseSpeedButtonGroup.add(jRadioButtonMenuItem5);
        jRadioButtonMenuItem5.setSelected(true);
        jRadioButtonMenuItem5.setText("1.5x");
        jRadioButtonMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mouseSpeedRadioButtonActionPerformed(evt);
            }
        });
        mouseZoomSpeedMenu.add(jRadioButtonMenuItem5);

        mouseSpeedButtonGroup.add(jRadioButtonMenuItem6);
        jRadioButtonMenuItem6.setText("2x");
        jRadioButtonMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mouseSpeedRadioButtonActionPerformed(evt);
            }
        });
        mouseZoomSpeedMenu.add(jRadioButtonMenuItem6);

        mouseSpeedButtonGroup.add(jRadioButtonMenuItem8);
        jRadioButtonMenuItem8.setText("4x");
        jRadioButtonMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mouseSpeedRadioButtonActionPerformed(evt);
            }
        });
        mouseZoomSpeedMenu.add(jRadioButtonMenuItem8);

        jMenu1.add(mouseZoomSpeedMenu);

        fractalTypeMenu.setText("Fractal Type");

        fractalButtonGroup.add(jRadioButtonMenuItem1);
        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("Mandelbrot");
        fractalTypeMenu.add(jRadioButtonMenuItem1);

        fractalButtonGroup.add(jRadioButtonMenuItem2);
        jRadioButtonMenuItem2.setText("Sierpinski");
        fractalTypeMenu.add(jRadioButtonMenuItem2);

        fractalButtonGroup.add(jRadioButtonMenuItem3);
        jRadioButtonMenuItem3.setText("Klein");
        fractalTypeMenu.add(jRadioButtonMenuItem3);

        fractalButtonGroup.add(jRadioButtonMenuItem4);
        jRadioButtonMenuItem4.setText("Newton");
        fractalTypeMenu.add(jRadioButtonMenuItem4);

        jMenu1.add(fractalTypeMenu);

        menuBar.add(jMenu1);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(notificationAreaPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 952, Short.MAX_VALUE)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 952, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notificationAreaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void imagePanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imagePanelMousePressed
            clearSelectionRectangle();
            mouseInitPos = mouseFinPos = evt.getPoint();
	}//GEN-LAST:event_imagePanelMousePressed

	private void imagePanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imagePanelMouseReleased
            if (!selRect.isEmpty()) {
                drawSelectionRegion(selRect);
                drawSelectionRectangle(selRect);
            }
	}//GEN-LAST:event_imagePanelMouseReleased

	private void imagePanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imagePanelMouseDragged
            Rectangle r;
            if (!selRect.isEmpty()) {
                drawSelectionRegion(selRect);
            }
            mouseFinPos = evt.getPoint();

            r = new Rectangle();
            if ((evt.getModifiersEx() & MouseEvent.BUTTON1_DOWN_MASK) == MouseEvent.BUTTON1_DOWN_MASK) {
                r = calculateSelRect(mouseInitPos, mouseFinPos);
            } else if ((evt.getModifiersEx() & MouseEvent.BUTTON3_DOWN_MASK) == MouseEvent.BUTTON3_DOWN_MASK) {
                r = calculateCentSelRect(mouseInitPos, mouseFinPos);
            }

            selRect = r;
            drawSelectionRegion(r);

            for (Component c : settingsPanel.getComponents()) {
                if (c.isVisible()) {
                    if (c instanceof MandelbrotSettingsPanel) {
                        MandelbrotSettingsPanel p = (MandelbrotSettingsPanel) c;
                        p.setSelectionRegion(r);
                    }
                }
            }
	}//GEN-LAST:event_imagePanelMouseDragged

	private void imagePanelComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_imagePanelComponentResized
            for (Component c : settingsPanel.getComponents()) {
                if (c.isVisible()) {
                    if (c instanceof MandelbrotSettingsPanel) {
                        MandelbrotSettingsPanel p;
                        p = (MandelbrotSettingsPanel) c;
                        p.setOutputSize(imagePanel.getBounds());
                        p.redrawImage();
                    }
                }
            }

            if (!selRect.isEmpty()) {
                drawSelectionRectangle(selRect);
            }
	}//GEN-LAST:event_imagePanelComponentResized

	private void imagePanelMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_imagePanelMouseWheelMoved
            double zoomFactor;

            zoomFactor = this.zoomFactor;
            if (evt.getWheelRotation() > 0) {
                zoomFactor = 1 / this.zoomFactor;
            }

            for (Component c : settingsPanel.getComponents()) {
                if (c.isVisible()) {
                    if (c instanceof MandelbrotSettingsPanel) {
                        MandelbrotSettingsPanel p = (MandelbrotSettingsPanel) c;
                        p.zoom(evt.getPoint(), zoomFactor);
                    }
                }
            }

	}//GEN-LAST:event_imagePanelMouseWheelMoved

	private void mouseSpeedRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mouseSpeedRadioButtonActionPerformed
            switch (evt.getActionCommand()) {
                case "1.5x":
                    zoomFactor = 1.5;
                    break;
                case "2x":
                    zoomFactor = 2.0;
                    break;
                case "4x":
                    zoomFactor = 4.0;
                    break;
            }
	}//GEN-LAST:event_mouseSpeedRadioButtonActionPerformed

	private void fixScalingMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fixScalingMenuItemActionPerformed
            for (Component c : settingsPanel.getComponents()) {
                if (c.isVisible()) {
                    if (c instanceof MandelbrotSettingsPanel) {
                        MandelbrotSettingsPanel p = (MandelbrotSettingsPanel) c;
                        clearSelectionRectangle();
                        Rectangle r = imagePanel.getBounds();
                        r.setLocation(0, 0);
                        p.setSelectionRegion(r);
                        p.startRendering();
                    }
                }
            }
	}//GEN-LAST:event_fixScalingMenuItemActionPerformed

    private void saveBufferMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBufferMenuItemActionPerformed
        JFileChooser fc;
        
        fc = new JFileChooser();
        fc.setDialogTitle("Save As...");
        if(fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            for (Component c : settingsPanel.getComponents()) {
                if (c.isVisible()) {
                    if (c instanceof MandelbrotSettingsPanel) {
                        ((MandelbrotSettingsPanel) c).writeImageToFile(fc.getSelectedFile());
                    }
                }
            }
        }
    }//GEN-LAST:event_saveBufferMenuItemActionPerformed

    private void rotateClockwiseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateClockwiseMenuItemActionPerformed
        for (Component c : settingsPanel.getComponents()) {
            if (c.isVisible()) {
                if (c instanceof MandelbrotSettingsPanel) {
                    MandelbrotSettingsPanel p = (MandelbrotSettingsPanel) c;
                    p.redrawImageRotated(Math.PI / 2);
                }
            }
        }
    }//GEN-LAST:event_rotateClockwiseMenuItemActionPerformed

    private void rotateAnticlockwiseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateAnticlockwiseMenuItemActionPerformed
        for (Component c : settingsPanel.getComponents()) {
            if (c.isVisible()) {
                if (c instanceof MandelbrotSettingsPanel) {
                    MandelbrotSettingsPanel p = (MandelbrotSettingsPanel) c;
                    p.redrawImageRotated(-Math.PI / 2);
                }
            }
        }
    }//GEN-LAST:event_rotateAnticlockwiseMenuItemActionPerformed

    private void resetRenderingRegionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetRenderingRegionMenuItemActionPerformed
        for (Component c : settingsPanel.getComponents()) {
            if (c.isVisible()) {
                if (c instanceof MandelbrotSettingsPanel) {
                    MandelbrotSettingsPanel p = (MandelbrotSettingsPanel) c;
                    p.resetRenderingRegion();
                    p.startRendering();
                }
            }
        }
    }//GEN-LAST:event_resetRenderingRegionMenuItemActionPerformed

    private void redrawImageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redrawImageMenuItemActionPerformed
        for (Component c : settingsPanel.getComponents()) {
            if (c.isVisible()) {
                if (c instanceof MandelbrotSettingsPanel) {
                    MandelbrotSettingsPanel p = (MandelbrotSettingsPanel) c;
                    clearSelectionRectangle();
                    p.redrawImage();
                }
            }
        }
    }//GEN-LAST:event_redrawImageMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fixScalingMenuItem;
    private javax.swing.ButtonGroup fractalButtonGroup;
    private javax.swing.JMenu fractalTypeMenu;
    private javax.swing.JPanel imagePanel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem2;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem3;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem4;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem5;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem6;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem8;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.ButtonGroup mouseSpeedButtonGroup;
    private javax.swing.JMenu mouseZoomSpeedMenu;
    private javax.swing.JLabel notificationAreaLabel;
    private javax.swing.JPanel notificationAreaPanel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JMenuItem redrawImageMenuItem;
    private javax.swing.JMenuItem resetRenderingRegionMenuItem;
    private javax.swing.JMenuItem rotateAnticlockwiseMenuItem;
    private javax.swing.JMenuItem rotateClockwiseMenuItem;
    private javax.swing.JMenu rotateImageMenu;
    private javax.swing.JMenuItem saveBufferMenuItem;
    private javax.swing.JPanel settingsPanel;
    // End of variables declaration//GEN-END:variables

    private void drawSelectionRectangle(Rectangle r) {
        Graphics g;

        g = imagePanel.getGraphics();
        g.setXORMode(Color.BLACK);
        g.setColor(Color.YELLOW);
        g.drawRect(r.x, r.y, r.width, r.height);
        g.setPaintMode();
    }

    private void drawSelectionRegion(Rectangle r) {
        Graphics g;

        g = imagePanel.getGraphics();
        g.setXORMode(Color.BLACK);
        g.setColor(Color.CYAN);
        g.fillRect(r.x + 1, r.y + 1, r.width - 1, r.height - 1);
        g.setColor(Color.YELLOW);
        g.drawRect(r.x, r.y, r.width, r.height);
        g.setPaintMode();
    }

    private Rectangle calculateSelRect(Point mouseInitPos, Point mouseFinPos) {
        int x, y, width, height;
        double aspectR, temp;

        x = mouseInitPos.x;
        y = mouseInitPos.y;
        width = mouseFinPos.x - x;
        height = mouseFinPos.y - y;

        aspectR = imagePanel.getWidth() / (double) imagePanel.getHeight();

        if (Math.abs(width) < Math.abs(height)) {
            temp = Math.abs(height) * aspectR;
            width = (int) (temp > Math.abs(width) ? (width >= 0 ? 1 : -1) * temp : width);
            height = (int) ((height >= 0 ? 1 : -1) * Math.abs(width) / aspectR);
        } else {
            temp = Math.abs(width) / aspectR;
            height = (int) (temp > Math.abs(height) ? (height >= 0 ? 1 : -1) * temp : height);
            width = (int) ((width >= 0 ? 1 : -1) * Math.abs(height) * aspectR);
        }

        if (width < 0) {
            x += width;
            width = -width;
        }
        if (height < 0) {
            y += height;
            height = -height;
        }
        return new Rectangle(x, y, width, height);
    }

    private Rectangle calculateCentSelRect(Point mouseInitPos, Point mouseFinPos) {
        Rectangle r;
        double cX, cY;

        r = calculateSelRect(mouseInitPos, mouseFinPos);
        cX = r.getCenterX();
        cY = r.getCenterY();
        if (cX > mouseInitPos.x) {
            if (cY > mouseInitPos.y) {
                return new Rectangle(r.x - r.width, r.y - r.height, 2 * r.width, 2 * r.height);
            } else {
                return new Rectangle(r.x - r.width, r.y, 2 * r.width, 2 * r.height);
            }

        } else {
            if (cY > mouseInitPos.y) {
                return new Rectangle(r.x, r.y - r.height, 2 * r.width, 2 * r.height);
            } else {
                return new Rectangle(r.x, r.y, 2 * r.width, 2 * r.height);
            }
        }
    }

    public Graphics getImagePanelGraphics() {
        return imagePanel.getGraphics();
    }

    public JProgressBar getProgressBar() {
        return progressBar;
    }

    public JLabel getNotificationAreaLabel() {
        return notificationAreaLabel;
    }

    public void clearSelectionRectangle() {
        if (!selRect.isEmpty()) {
            drawSelectionRectangle(selRect);
        }
        selRect = new Rectangle();
    }
}
